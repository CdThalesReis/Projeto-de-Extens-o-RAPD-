import tkinter as tk
from tkinter import messagebox


class Produto:
    def __init__(self, id_produto, nome, categoria, unidade, quantidade_atual, quantidade_minima, preco_unitario):
        self.id_produto = id_produto
        self.nome = nome
        self.categoria = categoria
        self.unidade = unidade
        self.quantidade_atual = quantidade_atual
        self.quantidade_minima = quantidade_minima
        self.preco_unitario = preco_unitario

    def atualizar_estoque(self, quantidade):
        self.quantidade_atual += quantidade
        if self.quantidade_atual < self.quantidade_minima:
            messagebox.showwarning("Estoque Baixo", f"Atenção! O estoque de {self.nome} está abaixo do mínimo recomendado.")

    def __str__(self):
        return f"{self.nome} - Estoque atual: {self.quantidade_atual} {self.unidade}, Preço: R$ {self.preco_unitario}"


class SistemaGerenciamento:
    def __init__(self):
        self.produtos = []
        self.vendas = []

    def adicionar_produto(self, produto):
        self.produtos.append(produto)

    def registrar_venda(self, id_produto, quantidade):
        produto = self.buscar_produto(id_produto)
        if produto and produto.quantidade_atual >= quantidade:
            produto.atualizar_estoque(-quantidade)
            total_venda = quantidade * produto.preco_unitario
            self.vendas.append({"id_produto": id_produto, "quantidade": quantidade, "total": total_venda})
            messagebox.showinfo("Venda registrada", f"Produto: {produto.nome}\nQuantidade: {quantidade}\nTotal: R$ {total_venda:.2f}")
        else:
            messagebox.showerror("Erro", f"Estoque insuficiente para o produto {produto.nome}.")

    def buscar_produto(self, id_produto):
        for produto in self.produtos:
            if produto.id_produto == id_produto:
                return produto
        return None

    def gerar_relatorio_vendas(self):
        total_geral = 0
        relatorio = "Relatório de Vendas:\n"
        for venda in self.vendas:
            produto = self.buscar_produto(venda["id_produto"])
            relatorio += f"Produto: {produto.nome}, Quantidade: {venda['quantidade']}, Total: R$ {venda['total']:.2f}\n"
            total_geral += venda["total"]
        relatorio += f"Total Geral de Vendas: R$ {total_geral:.2f}"
        messagebox.showinfo("Relatório de Vendas", relatorio)

    def gerar_relatorio_estoque(self):
        relatorio = "Relatório de Estoque:\n"
        for produto in self.produtos:
            relatorio += str(produto) + "\n"
        messagebox.showinfo("Relatório de Estoque", relatorio)


class InterfaceEstoque:
    def __init__(self, root, sistema):
        self.sistema = sistema
        self.root = root
        self.root.title("Sistema de Gerenciamento de Estoque")
        self.root.geometry("400x300")

        # Widgets para registrar venda
        tk.Label(root, text="ID do Produto:").pack()
        self.id_produto_entry = tk.Entry(root)
        self.id_produto_entry.pack()

        tk.Label(root, text="Quantidade Vendida:").pack()
        self.quantidade_entry = tk.Entry(root)
        self.quantidade_entry.pack()

        tk.Button(root, text="Registrar Venda", command=self.registrar_venda).pack(pady=10)

        # Botões para relatórios
        tk.Button(root, text="Gerar Relatório de Vendas", command=self.sistema.gerar_relatorio_vendas).pack(pady=5)
        tk.Button(root, text="Gerar Relatório de Estoque", command=self.sistema.gerar_relatorio_estoque).pack(pady=5)

    def registrar_venda(self):
        try:
            id_produto = int(self.id_produto_entry.get())
            quantidade = int(self.quantidade_entry.get())
            self.sistema.registrar_venda(id_produto, quantidade)
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira valores válidos.")


def main():
    # Inicializa o sistema
    sistema = SistemaGerenciamento()

    # Adiciona alguns produtos ao sistema
    sistema.adicionar_produto(Produto(1, "Bacon", "Comida", "kg", 10, 5, 20.0))
    sistema.adicionar_produto(Produto(2, "Hambúrguer de 200g", "Comida", "un", 20, 10, 6.0))
    sistema.adicionar_produto(Produto(3, "Calabresa", "Comida", "Kg", 15, 5, 15.0))
    sistema.adicionar_produto(Produto(4, "Queijo", "Comida", "Kg", 8, 4, 35.0))
    sistema.adicionar_produto(Produto(5, "Presunto", "Comida", "kg", 8, 4, 20.0))
    sistema.adicionar_produto(Produto(6, "Frango", "Comida", "Kg", 12, 6, 12.0))
    sistema.adicionar_produto(Produto(7, "Filé Mignon", "Comida", "Kg", 12, 6, 42.0))
    sistema.adicionar_produto(Produto(8, "Alface", "Comida", "maço", 10, 5, 10.0))
    sistema.adicionar_produto(Produto(9, "Tomate", "Comida", "kg", 10, 5, 13.0))
    sistema.adicionar_produto(Produto(10, "Salsicha", "Comida", "un", 100, 40, 1.0))
    sistema.adicionar_produto(Produto(11, "Milho", "Comida", "lata", 30, 5, 5.0))
    sistema.adicionar_produto(Produto(12, "Ervilha", "Comida", "lata", 30, 5, 5.0))
    sistema.adicionar_produto(Produto(13, "Catupiry", "Comida", "kg", 5, 2, 40.0))
    sistema.adicionar_produto(Produto(14, "Cheddar", "Comida", "kg", 5, 2, 50.0))
    sistema.adicionar_produto(Produto(15, "Pão de Hambúrguer", "Comida", "un", 50, 80, 2.0))
    sistema.adicionar_produto(Produto(16, "Pão Francês", "Comida", "un", 100, 30, 1.5))
    sistema.adicionar_produto(Produto(17, "Batata Palha", "Comida", "Pacote", 30, 10, 8.0))
    sistema.adicionar_produto(Produto(18, "Ketchup", "Comida", "Frasco", 20, 10, 15.0))
    sistema.adicionar_produto(Produto(19, "Mostarda", "Comida", "Frasco", 20, 10, 10.0))
    sistema.adicionar_produto(Produto(20, "Maionese", "Comida", "Frasco", 20, 10, 20.0))
    sistema.adicionar_produto(Produto(21, "Batata Palito (porção)", "Comida", "Kg", 10, 5, 25.0))
    sistema.adicionar_produto(Produto(22, "Suco de Laranja", "Bebida", "Litros", 20, 10, 4.0))
    sistema.adicionar_produto(Produto(23, "Suco de Limão", "Bebida", "Litros", 30, 10, 5.0))
    sistema.adicionar_produto(Produto(24, "Suco de Uva", "Bebida", "Litros", 5, 10, 5.0))
    sistema.adicionar_produto(Produto(25, "Suco de Maracujá", "Bebida", "Litros", 6, 10, 5.0))
    sistema.adicionar_produto(Produto(26, "Suco de Abacaxi", "Bebida", "Litros", 7, 10, 5.0))
    sistema.adicionar_produto(Produto(27, "Suco de Acerola", "Bebida", "Litros", 10, 10, 5.0))
    sistema.adicionar_produto(Produto(28, "Coca Cola", "Bebida", "Litros", 30, 20, 7.0))
    sistema.adicionar_produto(Produto(29, "Guaraná", "Bebida", "Litros", 30, 20, 6.0))
    sistema.adicionar_produto(Produto(30, "Fanta Uva", "Bebida", "Litros", 20, 20, 6.0))
    sistema.adicionar_produto(Produto(31, "Fanta Laranja", "Bebida", "Litros", 20, 20, 6.0))
    sistema.adicionar_produto(Produto(32, "Sprite", "Bebida", "Litros", 20, 20, 6.0))
    sistema.adicionar_produto(Produto(33, "Cerveja Budweiser", "Bebida", "garrafa", 30, 10, 8.0))
    sistema.adicionar_produto(Produto(34, "Cerveja Original", "Bebida", "garrafa", 30, 10, 8.0))
    sistema.adicionar_produto(Produto(35, "Cerveja Skol", "Bebida", "garrafa", 30, 10, 8.0))

    # Cria a interface gráfica
    root = tk.Tk()
    interface = InterfaceEstoque(root, sistema)

    root.mainloop()


if __name__ == "__main__":
    main()
